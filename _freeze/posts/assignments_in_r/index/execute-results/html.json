{
  "hash": "1c4f3baed9c738e41551eecb959ecf37",
  "result": {
    "markdown": "---\ntitle: \"Assignments in R\"\nsubtitle: \"The subtle difference between `x <- 3` and `x = 3`\"\ndate: \"2023-12-03\"\nimage: \"thumbnail.png\"\ndraft: false\ncategories: [R]\n---\n\n\nIn programming, assignment means linking a variable to a value, so the variable can represent that value later in the code. In R specifically, to assign the value `3` to the variable `x`, one can use\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\n```\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 3\n```\n:::\n\n\nBoth have the same effect, so does it matter which one we use? Long story short: not really, use `<-`.\n\n## A bit of history\n\nBack in 1993 when R was launched, `<-` was the only assignment operator. Meanwhile, `=` had a different role: it was (and still is) used for linking function arguments with their values, like in\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats::rnorm(1, mean = 10, sd = 0.01)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.99604\n```\n:::\n:::\n\n\nIn 2001, to make things easier for new users, especially those familiar with languages like C, [the R team introduced the use of `=` as an alternative assignment operator](https://developer.r-project.org/equalAssign.html). The context now makes the intent clear: `x = 3` shall be an assignment, while `f(x = 3)` means calling function `f` with `x` set to `3`.\n\n## Be aware of ambiguity\n\nSince 2001, the `=` symbol has two distinct meanings which can lead to ambiguity: either it is an assignment operator or a syntax token for named argument passing in function calls. \n\nR distinguishes these uses based on context. \n\nWithin any code of the form `<function_name>(<argname> = <value>, ...)`, the `=` is the token for naming arguments and is *not* an assignment. There are also scenarios where `=` must not be used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (x = 3) { }\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <text>:1:7: unexpected '='\n1: if (x =\n          ^\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwhile (x = 3) { }\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <text>:1:10: unexpected '='\n1: while (x =\n             ^\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (y in x = 1:3) { }\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <text>:1:13: unexpected '='\n1: for (y in x =\n                ^\n```\n:::\n:::\n\n\nIn any context other than function calls, `=` refers to the assignment operator. In particular, merely putting parentheses around the sub-expression makes any of the above valid *and an assignment*:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(x)\nif ((x = 3)) { }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(x)\nwhile ((x = 3)) { break }\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(x)\nfor (y in (x = 1:3)) { }\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n:::\n\n\n## The difference\n\nThe difference is clear when you use `=` and `<-` to set an argument value in a function call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(x)\nmedian(x = 1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.5\n```\n:::\n\n```{.r .cell-code}\nx   \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'x' not found\n```\n:::\n:::\n\n\nIn this case, `x` is declared only within the function scope, it does not exist in the user workspace.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(x)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in rm(x): object 'x' not found\n```\n:::\n\n```{.r .cell-code}\nmedian(x <- 1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.5\n```\n:::\n\n```{.r .cell-code}\nx    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\nBut here, `x` is declared in the user workspace, so it can be used after the function call has been completed.\n\nNote that the spaces around the arrow help to clarify situations like `x<-3`:\n\n- Does this mean assignment `x <- 3`?\n\n- Or less than `x < -3`?\n\n## So what to do?\n\nThe choice between using `=` or `<-` for assignments in R comes down to personal preference:\n\n- Many opt for `=` due to familiarity and its brevity in typing. \n- However, R traditionalists prefer `<-` for its clarity, especially in shared or published code. \n- Personally, I lean towards the arrow notation, with spaces on both sides for readability.\n\nFor those who prefer `=` but wish to conform to the more prevalent `<-` in publicly shared code (like on CRAN), the [`{formatR}` package](https://github.com/yihui/formatR#readme) helps by automatically converting `=` to `<-`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformatR::tidy_source(text = \"x=1:5\", arrow = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx <- 1:5\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
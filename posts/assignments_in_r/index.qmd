---
title: "Assignments in R"
subtitle: "The subtle difference between `x <- 3` and `x = 3`"
date: "2023-12-03"
image: "thumbnail.png"
draft: false
categories: [R]
---

In programming, assignment means linking a variable to a value, so the variable can represent that value later in the code. In R specifically, to assign the value `3` to the variable `x`, one can use

```{r}
x <- 3
```

or

```{r}
x = 3
```

Both have the same effect, so does it matter which one we use? Long story short: not really, use `<-`.

## A bit of history

Back in 1993 when R was launched, `<-` was the only assignment operator. Meanwhile, `=` had a different role: it was (and still is) used for linking function arguments with their values, like in

```{r}
rnorm(1, mean = 10)
```

In 2001, to make things easier for new users, especially those familiar with languages like C, [the R team introduced the use of `=` as an assignment operator too](https://developer.r-project.org/equalAssign.html). The context now makes the intent clear: `x = 3` shall be an assignment, while `f(x = 3)` means calling function `f` with `x` set to `3`.

## Be aware of ambiguity

The `=` symbol now has two distinct meanings which can lead to ambiguity: either it is an assignment operator or a syntax token for named argument passing in function calls. R distinguishes these uses based on context. 

Within any code of the form `<function_name>(<argname> = <value>, ...)`, the `=` is the token for naming arguments and is *not* an assignment. There are also scenarios where using `=` is not allowed:

```{r, error = TRUE}
if (x = 3) { }
```

```{r, error = TRUE}
while (x = 3) { }
```

```{r, error = TRUE}
for (y in x = 1:3) { }
```

In contexts other than function calls, `=` refers to the assignment operator. In particular, merely putting parentheses around the sub-expression makes any of the above valid *and an assignment*:

```{r, error = TRUE}
rm(x)
if ((x = 3)) { }
x
```

```{r, error = TRUE}
rm(x)
while ((x = 3)) { break }
x
```

```{r, error = TRUE}
rm(x)
for (y in (x = 1:3)) { }
x
```

## The difference

The difference is clear when you use `=` and `<-` to set an argument value in a function call:

```{r, error = TRUE}
rm(x)
median(x = 1:10)
x   
```

In this case, `x` is declared only within the function scope, it does not exist in the user workspace.

```{r}
rm(x)
median(x <- 1:10)
x    
```

But here, `x` is declared in the user workspace, so it can be used after the function call has been completed.

Note that the spaces around the arrow help to clarify situations like `x<-3`:

- Does this mean assignment `x <- 3`?

- Or less than `x < -3`?

## So what to do?

The choice between using `=` or `<-` for assignments in R comes down to personal preference:

- Many opt for `=` due to familiarity and its brevity in typing. 
- However, R traditionalists prefer `<-` for its clarity, especially in shared or published code. 
- Personally, I lean towards the arrow notation, with spaces on both sides for readability.

For those who prefer `=` but wish to conform to the more prevalent `<-` in publicly shared code (like on CRAN), the [`{formatR}` package](https://github.com/yihui/formatR#readme) helps by automatically converting `=` to `<-`:

```{r, formatR}
formatR::tidy_source(text = "x=1:5", arrow = TRUE)
``` 









